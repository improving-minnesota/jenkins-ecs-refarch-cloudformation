Description: >
    This is an example of a long running ECS service that needs to connect to another ECS service (product-service)
    via it's load balancer. We use environment variables to pass the URL of the product-service to this one's container(s).

Parameters:

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 1

    MaxCount:
        Description: Maximum number of instances of this task we can run across our cluster
        Type: Number
        Default: 1

    JenkinsImage:
        Description: Docker image (url/repo:tag) to use for Jenkins
        Type: String
        Default: jenkins/jenkins:lts-alpine

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    LoadBalancerUrl:
        Description: The Application Load Balancer URL
        Type: String

    ECSServiceAutoScalingRoleARN:
        Description: The ECS service auto scaling role ARN
        Type: String

    AdminUsernameKey:
        Description: The ECS service auto scaling role ARN
        Type: String
        MinLength: 1
        Default: /jenkins/admin/username

    AdminPasswordKey:
        Description: The ECS service auto scaling role ARN
        Type: String
        MinLength: 1
        Default: /jenkins/admin/password

    AdminUsername:
        Description: The ECS service auto scaling role ARN
        Type: String
        MinLength: 3

    AdminPassword:
        Description: The ECS service auto scaling role ARN
        Type: String
        MinLength: 8
        NoEcho: true

Resources:

    JenkinsUser:
        Type: AWS::SSM::Parameter
        Properties:
            Name: !Ref AdminUsernameKey
            Type: String
            Value: !Ref AdminUsername
            Description: "SSM Parameter to be used for Jenkins Admin User"
            AllowedPattern: "^.*{8,24}$"

    JenkinsPassword:
        Type: AWS::SSM::Parameter
        Properties:
            Name: !Ref AdminPasswordKey
            Type: String
            Value: !Ref AdminPassword
            Description: "SSM Parameter to be used for Jenkins Admin Password"
            AllowedPattern: "^.*{8,24}$"

    Service:
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties:
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers:
                - ContainerName: "jenkins-master"
                  ContainerPort: 8080
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: jenkins-master
            TaskRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${TaskRole}
            ContainerDefinitions:
                - Name: jenkins-master
                  Essential: true
                  Image: !Ref JenkinsImage
                  Memory: 1024
                  Environment:
                    - Name: JENKINS_ADMIN_USERNAME_KEY
                      Value: !Ref JenkinsUser
                    - Name: JENKINS_ADMIN_PASSWORD_KEY
                      Value: !Ref JenkinsPassword
                    - Name: JENKINS_AGENT_IAM_ROLE_ARN
                      Value: !Ref TaskRole
                    - Name: ECS_CLUSTER_ARN
                      Value: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Cluster}
                    - Name: AWS_REGION
                      Value: !Ref AWS::Region
                  PortMappings:
                    - ContainerPort: 8080
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 30

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /login
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward
            Conditions:
                - Field: path-pattern
                  Values:
                    - /*

    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                          - ecs.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }

    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-task-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ecs-tasks.amazonaws.com
                              - ssm.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: !Sub ecs-task-${AWS::StackName}-ssm
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: "Allow"
                        Action:
                            - ssm:GetParameter
                        Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/jenkins/*

Outputs:

    JenkinsUsernameKey:
        Description: SSM Key where Jenkins Admin Username is stored
        Value: !Ref JenkinsUser

    JenkinsPasswordKey:
        Description: SSM Key where Jenkins Admin Password is stored
        Value: !Ref JenkinsPassword

    JenkinsPasswordKey:
        Description: SSM Key where Jenkins Admin Password is stored
        Value: !Ref JenkinsPassword
